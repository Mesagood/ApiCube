// <auto-generated />
using System;
using Cube;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace Cube.Migrations
{
    [DbContext(typeof(ItCubeContext))]
    [Migration("20210418104356_v1")]
    partial class v1
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.5")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Cube.Models.Address", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("City")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("NumberApartament")
                        .HasColumnType("bigint");

                    b.Property<long>("NumberHouse")
                        .HasColumnType("bigint");

                    b.Property<string>("Region")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Street")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Addresses");
                });

            modelBuilder.Entity("Cube.Models.Answer", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AnswerName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Answers");
                });

            modelBuilder.Entity("Cube.Models.Child", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ClassScool")
                        .HasColumnType("int");

                    b.Property<DateTime>("DateOfBirdh")
                        .HasColumnType("datetime2");

                    b.Property<int>("Educator")
                        .HasColumnType("int");

                    b.Property<string>("FirstNameChild")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstNameParent")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastNameChild")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastNameParent")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MiddleNameChild")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MiddleNameParent")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("PFDO")
                        .HasColumnType("bigint");

                    b.Property<string>("Program")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SNILS")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("School")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Shift")
                        .HasColumnType("int");

                    b.Property<string>("Status")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("StatusGroup")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TelephoneParent")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("UserId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Childs");
                });

            modelBuilder.Entity("Cube.Models.CinChild", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("NameCin")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("CinChildrens");
                });

            modelBuilder.Entity("Cube.Models.ConnectionGroup", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Certificate")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NameGroups")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("ConnectionGroups");
                });

            modelBuilder.Entity("Cube.Models.Equipment", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("ContainmentDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("EquipmentDeleted")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("EquipmentGroupId")
                        .HasColumnType("bigint");

                    b.Property<string>("EquipmentInventoryNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("EquipmentStatusId")
                        .HasColumnType("bigint");

                    b.Property<long?>("EquipmentStatuseId")
                        .HasColumnType("bigint");

                    b.Property<long>("EquipmentTypeId")
                        .HasColumnType("bigint");

                    b.Property<long>("RoomId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("EquipmentGroupId");

                    b.HasIndex("EquipmentStatuseId");

                    b.HasIndex("EquipmentTypeId");

                    b.HasIndex("RoomId");

                    b.ToTable("Equipments");
                });

            modelBuilder.Entity("Cube.Models.EquipmentGroup", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("EquipmentGroupDeleted")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EquipmentGroupDescription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EquipmentGroupName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("EquipmentGroupTypeId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("EquipmentGroupTypeId");

                    b.ToTable("EquipmentGroups");
                });

            modelBuilder.Entity("Cube.Models.EquipmentGroupType", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("EquipmentGroupTypeName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("EquipmentGroupTypes");
                });

            modelBuilder.Entity("Cube.Models.EquipmentMovementHistory", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("DateOfMovement")
                        .HasColumnType("datetime2");

                    b.Property<long?>("EmployeeResponsibleForMovingId")
                        .HasColumnType("bigint");

                    b.Property<long>("EquipmentId")
                        .HasColumnType("bigint");

                    b.Property<string>("PlaceOfMovement")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("UserId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("EquipmentId");

                    b.HasIndex("UserId");

                    b.ToTable("EquipmentMovementHistories");
                });

            modelBuilder.Entity("Cube.Models.EquipmentStatuse", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("EquipmentStatusName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("EquipmentStatuses");
                });

            modelBuilder.Entity("Cube.Models.EquipmentType", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("EquipmentTypeName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("EquipmentTypes");
                });

            modelBuilder.Entity("Cube.Models.EquipmentsInServiceNote", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long>("EquipmentId")
                        .HasColumnType("bigint");

                    b.Property<string>("EquipmentInServiceNoteDeleted")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("ServiceNoteId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("EquipmentId");

                    b.HasIndex("ServiceNoteId");

                    b.ToTable("EquipmentsInServiceNotes");
                });

            modelBuilder.Entity("Cube.Models.Event", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("DateEvent")
                        .HasColumnType("datetime2");

                    b.Property<long>("FromOne")
                        .HasColumnType("bigint");

                    b.Property<long>("LevelId")
                        .HasColumnType("bigint");

                    b.Property<string>("LinkEvent")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("nameEvent")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("LevelId");

                    b.ToTable("Events");
                });

            modelBuilder.Entity("Cube.Models.Gender", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("NameGender")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ShortGender")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Genders");
                });

            modelBuilder.Entity("Cube.Models.Group", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long?>("ConnectionGroupId")
                        .HasColumnType("bigint");

                    b.Property<long>("NumGroup")
                        .HasColumnType("bigint");

                    b.Property<string>("Status")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ConnectionGroupId");

                    b.ToTable("Group");
                });

            modelBuilder.Entity("Cube.Models.GroupChild", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long>("ChildId")
                        .HasColumnType("bigint");

                    b.Property<long>("GroupId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("ChildId");

                    b.HasIndex("GroupId");

                    b.ToTable("GroupChilds");
                });

            modelBuilder.Entity("Cube.Models.GroupOfChildren", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long?>("ChildId")
                        .HasColumnType("bigint");

                    b.Property<long>("ChildOfId")
                        .HasColumnType("bigint");

                    b.Property<long?>("GroupId")
                        .HasColumnType("bigint");

                    b.Property<long?>("GroupsId")
                        .HasColumnType("bigint");

                    b.Property<long>("GroupsOfId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("ChildId");

                    b.HasIndex("GroupId");

                    b.HasIndex("GroupsId");

                    b.ToTable("GroupOfChilds");
                });

            modelBuilder.Entity("Cube.Models.Groups", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long?>("ConnectionGroupId")
                        .HasColumnType("bigint");

                    b.Property<long>("NameGroup")
                        .HasColumnType("bigint");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("ConnectionGroupId");

                    b.HasIndex("UserId");

                    b.ToTable("Groups");
                });

            modelBuilder.Entity("Cube.Models.Lession", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("NameLessions")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Status")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Lessions");
                });

            modelBuilder.Entity("Cube.Models.LessionChild", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("DateTimeChild")
                        .HasColumnType("datetime2");

                    b.Property<long>("GroupChildId")
                        .HasColumnType("bigint");

                    b.Property<long>("LessionId")
                        .HasColumnType("bigint");

                    b.Property<long>("NumberClassroom")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("GroupChildId");

                    b.HasIndex("LessionId");

                    b.ToTable("LessionChilds");
                });

            modelBuilder.Entity("Cube.Models.LessionEmployee", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long>("EmployeeId")
                        .HasColumnType("bigint");

                    b.Property<long>("LessionId")
                        .HasColumnType("bigint");

                    b.Property<long?>("UserId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("LessionId");

                    b.HasIndex("UserId");

                    b.ToTable("LessionEmployees");
                });

            modelBuilder.Entity("Cube.Models.Level", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("NameLevel")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Levels");
                });

            modelBuilder.Entity("Cube.Models.Module", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ModulesName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Modules");
                });

            modelBuilder.Entity("Cube.Models.ModuleChild", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long>("ModuleId")
                        .HasColumnType("bigint");

                    b.Property<long>("ModuleTestId")
                        .HasColumnType("bigint");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("ModuleId");

                    b.HasIndex("ModuleTestId");

                    b.HasIndex("UserId");

                    b.ToTable("ModuleChilds");
                });

            modelBuilder.Entity("Cube.Models.ModuleTest", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.HasKey("Id");

                    b.ToTable("ModuleTests");
                });

            modelBuilder.Entity("Cube.Models.Passport", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Number")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Series")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Passports");
                });

            modelBuilder.Entity("Cube.Models.Position", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CodePosition")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NamePosition")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Positions");
                });

            modelBuilder.Entity("Cube.Models.Question", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("QuestionsName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Questions");
                });

            modelBuilder.Entity("Cube.Models.QuestionAnswer", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long?>("AnswerId")
                        .HasColumnType("bigint");

                    b.Property<long>("AnswersId")
                        .HasColumnType("bigint");

                    b.Property<long?>("QuestionId")
                        .HasColumnType("bigint");

                    b.Property<long>("QuestionsId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("AnswerId");

                    b.HasIndex("QuestionId");

                    b.ToTable("QuestionAnswers");
                });

            modelBuilder.Entity("Cube.Models.Result", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<double>("Procent")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.ToTable("Results");
                });

            modelBuilder.Entity("Cube.Models.Role", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("NameRole")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ShortRole")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Roles");
                });

            modelBuilder.Entity("Cube.Models.Room", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long>("EmployeeResponsibleForRoomId")
                        .HasColumnType("bigint");

                    b.Property<string>("RoomDeleted")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoomName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("RoomNumber")
                        .HasColumnType("bigint");

                    b.Property<long?>("UserId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Rooms");
                });

            modelBuilder.Entity("Cube.Models.SelectGroup", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Certificate")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("ChildId")
                        .HasColumnType("bigint");

                    b.Property<long>("GroupId")
                        .HasColumnType("bigint");

                    b.Property<long?>("GroupsId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("ChildId");

                    b.HasIndex("GroupsId");

                    b.ToTable("SelectGroups");
                });

            modelBuilder.Entity("Cube.Models.ServiceNote", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long>("EmployeeResponsibleForServiceNoteId")
                        .HasColumnType("bigint");

                    b.Property<string>("ServiceNoteDeleted")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ServiceNoteNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("UserId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("WritingDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("ServiceNotes");
                });

            modelBuilder.Entity("Cube.Models.StaffEvent", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long>("Help")
                        .HasColumnType("bigint");

                    b.Property<long>("UeId")
                        .HasColumnType("bigint");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.Property<long?>("UserInEventId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.HasIndex("UserInEventId");

                    b.ToTable("StaffEvents");
                });

            modelBuilder.Entity("Cube.Models.Statuse", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("NameStatus")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Statuses");
                });

            modelBuilder.Entity("Cube.Models.Test", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("NameTest")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Tests");
                });

            modelBuilder.Entity("Cube.Models.TestQuest", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long?>("CinChildId")
                        .HasColumnType("bigint");

                    b.Property<long>("CinId")
                        .HasColumnType("bigint");

                    b.Property<long>("ModuleTestId")
                        .HasColumnType("bigint");

                    b.Property<long>("QuesAnswId")
                        .HasColumnType("bigint");

                    b.Property<long?>("QuestionAnswerId")
                        .HasColumnType("bigint");

                    b.Property<long>("ResultId")
                        .HasColumnType("bigint");

                    b.Property<long>("TestId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("CinChildId");

                    b.HasIndex("ModuleTestId");

                    b.HasIndex("QuestionAnswerId");

                    b.HasIndex("ResultId");

                    b.HasIndex("TestId");

                    b.ToTable("TestQuests");
                });

            modelBuilder.Entity("Cube.Models.User", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long>("AddressId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("BirthDay")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("GenderId")
                        .HasColumnType("bigint");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Login")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MiddleName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("PassportId")
                        .HasColumnType("bigint");

                    b.Property<string>("Password")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Photo")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("AddressId");

                    b.HasIndex("GenderId");

                    b.HasIndex("PassportId");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("Cube.Models.UserInEvent", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Certificate")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Comment")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("EventId")
                        .HasColumnType("bigint");

                    b.Property<long>("GroupId")
                        .HasColumnType("bigint");

                    b.Property<long?>("GroupsId")
                        .HasColumnType("bigint");

                    b.Property<string>("Info")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("StatusId")
                        .HasColumnType("bigint");

                    b.Property<long?>("StatuseId")
                        .HasColumnType("bigint");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("EventId");

                    b.HasIndex("GroupsId");

                    b.HasIndex("StatuseId");

                    b.HasIndex("UserId");

                    b.ToTable("UserInEvents");
                });

            modelBuilder.Entity("Cube.Models.UserPost", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long?>("PositionId")
                        .HasColumnType("bigint");

                    b.Property<long>("PostId")
                        .HasColumnType("bigint");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("PositionId");

                    b.HasIndex("UserId");

                    b.ToTable("UserPosts");
                });

            modelBuilder.Entity("Cube.Models.UserRole", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long>("RoleId")
                        .HasColumnType("bigint");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.HasIndex("UserId");

                    b.ToTable("UserRoles");
                });

            modelBuilder.Entity("Cube.Models.Child", b =>
                {
                    b.HasOne("Cube.Models.User", "User")
                        .WithMany("Child")
                        .HasForeignKey("UserId");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Cube.Models.Equipment", b =>
                {
                    b.HasOne("Cube.Models.EquipmentGroup", "EquipmentGroup")
                        .WithMany("Equipment")
                        .HasForeignKey("EquipmentGroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Cube.Models.EquipmentStatuse", "EquipmentStatuse")
                        .WithMany("Equipment")
                        .HasForeignKey("EquipmentStatuseId");

                    b.HasOne("Cube.Models.EquipmentType", "EquipmentType")
                        .WithMany("Equipment")
                        .HasForeignKey("EquipmentTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Cube.Models.Room", "Room")
                        .WithMany("Equipment")
                        .HasForeignKey("RoomId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("EquipmentGroup");

                    b.Navigation("EquipmentStatuse");

                    b.Navigation("EquipmentType");

                    b.Navigation("Room");
                });

            modelBuilder.Entity("Cube.Models.EquipmentGroup", b =>
                {
                    b.HasOne("Cube.Models.EquipmentGroupType", "EquipmentGroupType")
                        .WithMany("EquipmentGroup")
                        .HasForeignKey("EquipmentGroupTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("EquipmentGroupType");
                });

            modelBuilder.Entity("Cube.Models.EquipmentMovementHistory", b =>
                {
                    b.HasOne("Cube.Models.Equipment", "Equipment")
                        .WithMany("EquipmentMovementHistory")
                        .HasForeignKey("EquipmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Cube.Models.User", "User")
                        .WithMany("EquipmentMovementHistory")
                        .HasForeignKey("UserId");

                    b.Navigation("Equipment");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Cube.Models.EquipmentsInServiceNote", b =>
                {
                    b.HasOne("Cube.Models.Equipment", "Equipment")
                        .WithMany("EquipmentsInServiceNote")
                        .HasForeignKey("EquipmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Cube.Models.ServiceNote", "ServiceNote")
                        .WithMany("EquipmentsInServiceNote")
                        .HasForeignKey("ServiceNoteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Equipment");

                    b.Navigation("ServiceNote");
                });

            modelBuilder.Entity("Cube.Models.Event", b =>
                {
                    b.HasOne("Cube.Models.Level", "Levels")
                        .WithMany("Event")
                        .HasForeignKey("LevelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Levels");
                });

            modelBuilder.Entity("Cube.Models.Group", b =>
                {
                    b.HasOne("Cube.Models.ConnectionGroup", null)
                        .WithMany("Group")
                        .HasForeignKey("ConnectionGroupId");
                });

            modelBuilder.Entity("Cube.Models.GroupChild", b =>
                {
                    b.HasOne("Cube.Models.Child", "Child")
                        .WithMany("GroupChild")
                        .HasForeignKey("ChildId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Cube.Models.Group", "Group")
                        .WithMany("GroupChild")
                        .HasForeignKey("GroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Child");

                    b.Navigation("Group");
                });

            modelBuilder.Entity("Cube.Models.GroupOfChildren", b =>
                {
                    b.HasOne("Cube.Models.Child", "Child")
                        .WithMany("GroupOfChildren")
                        .HasForeignKey("ChildId");

                    b.HasOne("Cube.Models.Group", "Group")
                        .WithMany()
                        .HasForeignKey("GroupId");

                    b.HasOne("Cube.Models.Groups", null)
                        .WithMany("GroupOfChildren")
                        .HasForeignKey("GroupsId");

                    b.Navigation("Child");

                    b.Navigation("Group");
                });

            modelBuilder.Entity("Cube.Models.Groups", b =>
                {
                    b.HasOne("Cube.Models.ConnectionGroup", "ConnectionGroup")
                        .WithMany()
                        .HasForeignKey("ConnectionGroupId");

                    b.HasOne("Cube.Models.User", "User")
                        .WithMany("Groups")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ConnectionGroup");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Cube.Models.LessionChild", b =>
                {
                    b.HasOne("Cube.Models.GroupChild", "GroupChild")
                        .WithMany("LessionChild")
                        .HasForeignKey("GroupChildId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Cube.Models.Lession", "Lession")
                        .WithMany("LessionChild")
                        .HasForeignKey("LessionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("GroupChild");

                    b.Navigation("Lession");
                });

            modelBuilder.Entity("Cube.Models.LessionEmployee", b =>
                {
                    b.HasOne("Cube.Models.Lession", "Lession")
                        .WithMany("LessionEmployee")
                        .HasForeignKey("LessionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Cube.Models.User", "User")
                        .WithMany("LessionEmployees")
                        .HasForeignKey("UserId");

                    b.Navigation("Lession");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Cube.Models.ModuleChild", b =>
                {
                    b.HasOne("Cube.Models.Module", "Module")
                        .WithMany("ModuleChild")
                        .HasForeignKey("ModuleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Cube.Models.ModuleTest", "ModuleTest")
                        .WithMany("ModuleChild")
                        .HasForeignKey("ModuleTestId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Cube.Models.User", "Users")
                        .WithMany("ModuleChild")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Module");

                    b.Navigation("ModuleTest");

                    b.Navigation("Users");
                });

            modelBuilder.Entity("Cube.Models.QuestionAnswer", b =>
                {
                    b.HasOne("Cube.Models.Answer", "Answer")
                        .WithMany("QuestionAnswer")
                        .HasForeignKey("AnswerId");

                    b.HasOne("Cube.Models.Question", "Question")
                        .WithMany("QuestionAnswer")
                        .HasForeignKey("QuestionId");

                    b.Navigation("Answer");

                    b.Navigation("Question");
                });

            modelBuilder.Entity("Cube.Models.Room", b =>
                {
                    b.HasOne("Cube.Models.User", "User")
                        .WithMany("Room")
                        .HasForeignKey("UserId");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Cube.Models.SelectGroup", b =>
                {
                    b.HasOne("Cube.Models.Child", "Child")
                        .WithMany("SelectGroup")
                        .HasForeignKey("ChildId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Cube.Models.Groups", "Groups")
                        .WithMany("SelectGroup")
                        .HasForeignKey("GroupsId");

                    b.Navigation("Child");

                    b.Navigation("Groups");
                });

            modelBuilder.Entity("Cube.Models.ServiceNote", b =>
                {
                    b.HasOne("Cube.Models.User", "User")
                        .WithMany("ServiceNote")
                        .HasForeignKey("UserId");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Cube.Models.StaffEvent", b =>
                {
                    b.HasOne("Cube.Models.User", "User")
                        .WithMany("StaffEvent")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Cube.Models.UserInEvent", "UserInEvent")
                        .WithMany("StaffEvent")
                        .HasForeignKey("UserInEventId");

                    b.Navigation("User");

                    b.Navigation("UserInEvent");
                });

            modelBuilder.Entity("Cube.Models.TestQuest", b =>
                {
                    b.HasOne("Cube.Models.CinChild", "CinChild")
                        .WithMany("TestQuest")
                        .HasForeignKey("CinChildId");

                    b.HasOne("Cube.Models.ModuleTest", "ModuleTest")
                        .WithMany("TestQuest")
                        .HasForeignKey("ModuleTestId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Cube.Models.QuestionAnswer", "QuestionAnswer")
                        .WithMany("TestQuest")
                        .HasForeignKey("QuestionAnswerId");

                    b.HasOne("Cube.Models.Result", "Result")
                        .WithMany("TestQuest")
                        .HasForeignKey("ResultId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Cube.Models.Test", "Test")
                        .WithMany("TestQuest")
                        .HasForeignKey("TestId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CinChild");

                    b.Navigation("ModuleTest");

                    b.Navigation("QuestionAnswer");

                    b.Navigation("Result");

                    b.Navigation("Test");
                });

            modelBuilder.Entity("Cube.Models.User", b =>
                {
                    b.HasOne("Cube.Models.Address", "Address")
                        .WithMany("User")
                        .HasForeignKey("AddressId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Cube.Models.Gender", "Gender")
                        .WithMany("User")
                        .HasForeignKey("GenderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Cube.Models.Passport", "Passport")
                        .WithMany("User")
                        .HasForeignKey("PassportId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Address");

                    b.Navigation("Gender");

                    b.Navigation("Passport");
                });

            modelBuilder.Entity("Cube.Models.UserInEvent", b =>
                {
                    b.HasOne("Cube.Models.Event", "Event")
                        .WithMany("UserInEvent")
                        .HasForeignKey("EventId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Cube.Models.Groups", "Groups")
                        .WithMany("UserInEvent")
                        .HasForeignKey("GroupsId");

                    b.HasOne("Cube.Models.Statuse", "Statuse")
                        .WithMany("UserInEvent")
                        .HasForeignKey("StatuseId");

                    b.HasOne("Cube.Models.User", "User")
                        .WithMany("UserInEvent")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Event");

                    b.Navigation("Groups");

                    b.Navigation("Statuse");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Cube.Models.UserPost", b =>
                {
                    b.HasOne("Cube.Models.Position", "Position")
                        .WithMany("UserPost")
                        .HasForeignKey("PositionId");

                    b.HasOne("Cube.Models.User", "User")
                        .WithMany("UserPosts")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Position");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Cube.Models.UserRole", b =>
                {
                    b.HasOne("Cube.Models.Role", "Role")
                        .WithMany("UserRole")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Cube.Models.User", "User")
                        .WithMany("UserRole")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Cube.Models.Address", b =>
                {
                    b.Navigation("User");
                });

            modelBuilder.Entity("Cube.Models.Answer", b =>
                {
                    b.Navigation("QuestionAnswer");
                });

            modelBuilder.Entity("Cube.Models.Child", b =>
                {
                    b.Navigation("GroupChild");

                    b.Navigation("GroupOfChildren");

                    b.Navigation("SelectGroup");
                });

            modelBuilder.Entity("Cube.Models.CinChild", b =>
                {
                    b.Navigation("TestQuest");
                });

            modelBuilder.Entity("Cube.Models.ConnectionGroup", b =>
                {
                    b.Navigation("Group");
                });

            modelBuilder.Entity("Cube.Models.Equipment", b =>
                {
                    b.Navigation("EquipmentMovementHistory");

                    b.Navigation("EquipmentsInServiceNote");
                });

            modelBuilder.Entity("Cube.Models.EquipmentGroup", b =>
                {
                    b.Navigation("Equipment");
                });

            modelBuilder.Entity("Cube.Models.EquipmentGroupType", b =>
                {
                    b.Navigation("EquipmentGroup");
                });

            modelBuilder.Entity("Cube.Models.EquipmentStatuse", b =>
                {
                    b.Navigation("Equipment");
                });

            modelBuilder.Entity("Cube.Models.EquipmentType", b =>
                {
                    b.Navigation("Equipment");
                });

            modelBuilder.Entity("Cube.Models.Event", b =>
                {
                    b.Navigation("UserInEvent");
                });

            modelBuilder.Entity("Cube.Models.Gender", b =>
                {
                    b.Navigation("User");
                });

            modelBuilder.Entity("Cube.Models.Group", b =>
                {
                    b.Navigation("GroupChild");
                });

            modelBuilder.Entity("Cube.Models.GroupChild", b =>
                {
                    b.Navigation("LessionChild");
                });

            modelBuilder.Entity("Cube.Models.Groups", b =>
                {
                    b.Navigation("GroupOfChildren");

                    b.Navigation("SelectGroup");

                    b.Navigation("UserInEvent");
                });

            modelBuilder.Entity("Cube.Models.Lession", b =>
                {
                    b.Navigation("LessionChild");

                    b.Navigation("LessionEmployee");
                });

            modelBuilder.Entity("Cube.Models.Level", b =>
                {
                    b.Navigation("Event");
                });

            modelBuilder.Entity("Cube.Models.Module", b =>
                {
                    b.Navigation("ModuleChild");
                });

            modelBuilder.Entity("Cube.Models.ModuleTest", b =>
                {
                    b.Navigation("ModuleChild");

                    b.Navigation("TestQuest");
                });

            modelBuilder.Entity("Cube.Models.Passport", b =>
                {
                    b.Navigation("User");
                });

            modelBuilder.Entity("Cube.Models.Position", b =>
                {
                    b.Navigation("UserPost");
                });

            modelBuilder.Entity("Cube.Models.Question", b =>
                {
                    b.Navigation("QuestionAnswer");
                });

            modelBuilder.Entity("Cube.Models.QuestionAnswer", b =>
                {
                    b.Navigation("TestQuest");
                });

            modelBuilder.Entity("Cube.Models.Result", b =>
                {
                    b.Navigation("TestQuest");
                });

            modelBuilder.Entity("Cube.Models.Role", b =>
                {
                    b.Navigation("UserRole");
                });

            modelBuilder.Entity("Cube.Models.Room", b =>
                {
                    b.Navigation("Equipment");
                });

            modelBuilder.Entity("Cube.Models.ServiceNote", b =>
                {
                    b.Navigation("EquipmentsInServiceNote");
                });

            modelBuilder.Entity("Cube.Models.Statuse", b =>
                {
                    b.Navigation("UserInEvent");
                });

            modelBuilder.Entity("Cube.Models.Test", b =>
                {
                    b.Navigation("TestQuest");
                });

            modelBuilder.Entity("Cube.Models.User", b =>
                {
                    b.Navigation("Child");

                    b.Navigation("EquipmentMovementHistory");

                    b.Navigation("Groups");

                    b.Navigation("LessionEmployees");

                    b.Navigation("ModuleChild");

                    b.Navigation("Room");

                    b.Navigation("ServiceNote");

                    b.Navigation("StaffEvent");

                    b.Navigation("UserInEvent");

                    b.Navigation("UserPosts");

                    b.Navigation("UserRole");
                });

            modelBuilder.Entity("Cube.Models.UserInEvent", b =>
                {
                    b.Navigation("StaffEvent");
                });
#pragma warning restore 612, 618
        }
    }
}
